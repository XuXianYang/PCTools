//
//  PCTools.pch
//  PCTools
//
//  Created by apple on 2019/12/19.
//  Copyright © 2019 apple. All rights reserved.
//

#ifndef PCTools_pch
#define PCTools_pch

#define singleton_interface(className) + (className *)shared;

#import "AFNetworking.h"
#import "Masonry.h"
#import "AppDelegate.h"
#import "UIViewController+animation.h"
#import "UIView+Extension.h"
#import "UIImageView+WebCache.h"
#import "PCBaseViewController.h"
#import "CommonTool.h"
#import "PCCalculatorProperty.h"
#import "PCRequestTool.h"
#import "PCURLConfig.h"
#import "PNCGifWaitView.h"
#import "NSString+Handle.h"

//屏幕宽高
#define kScreenW [UIScreen mainScreen].bounds.size.width
#define kScreenH [UIScreen mainScreen].bounds.size.height
#define kAutoScale(scale) ((scale) * kScreenW / 375.0f)

#define iPhoneXSeries CGRectGetHeight([[UIApplication sharedApplication] statusBarFrame])==44.0f
#define PNCisIPHONEX  ((CGRectGetHeight([[UIScreen mainScreen] bounds]) >=812.0f)? (YES):(NO))
#define PCisiPhoneX (iPhoneXSeries==YES || PNCisIPHONEX==YES)
//状态栏高度
#define PCStatusBarHeight (PCisiPhoneX ? 44 : 20)
//Tabbar高度
#define PCTabbarHeight (PCisiPhoneX ? 83 : 49)
//导航栏高度
#define PCNaviBarHeight (PCisiPhoneX ? 88 : 64)

#define EUTNaviBarHeight (PCisiPhoneX ? 88 : 64)


#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:1]
#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:(a)]
#define COLOR_RGB_0X(rgbValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]
// rgb颜色转换（16进制->10进制）
#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]
#define RGBA(r, g, b, a) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:(a)]

#define MainColor UIColorFromRGB(0x36348E)
#define MainBgColor UIColorFromRGB(0xf0f0f0)

#define APPDELEGATE  ((AppDelegate *)[[UIApplication sharedApplication] delegate])
#define SP(R)  (R)*(kScreenW)/375.0

#define SHOWMESSAGE_(title,messages) \
UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title \
message:messages \
delegate:self \
cancelButtonTitle:@"我知道了" \
otherButtonTitles:nil, nil]; \
[alert show]; \

#define SHOWTOAST__(MATEXT) \
[[[Toast shareToast] makeText:MATEXT time:1.5] show]; \


/**
 *  在.h文件中定义的宏，arc
 *
 *  singleton_interface(className) 这个是宏
 *  + (instancetype)shared##className;这个是被代替的方法， ##代表着shared+name 高度定制化
 *  在外边我们使用 “singleton_interface(gege)” 那么在.h文件中，定义了一个方法"+ (instancetype)sharedgege",所以，第一个字母要大写
 *
 *  @return 一个搞定好的方法名
 */
#define singleton_interface(className) + (className *)shared;


/**
 *  在.m文件中处理好的宏 arc
 *
 *  singleton_implementation(className) 这个是宏,因为是多行的东西，所以每行后面都有一个"\",最后一行除外，
 * 之所以还要传递一个“className”,是因为有个方法要命名"+ (instancetype)shared##className"
 *  @return 单例
 */
#define singleton_implementation(className) \
static id _instance;  \
+ (id)shared  \
{   \
if (_instance == nil) { \
_instance = [[self alloc] init];    \
}   \
return _instance;   \
}   \
+ (instancetype)allocWithZone:(struct _NSZone *)zone  \
{   \
static dispatch_once_t once;    \
dispatch_once(&once, ^{ \
_instance = [super allocWithZone:zone]; \
}); \
return _instance;   \
}   \
- (instancetype)copyWithZone:(NSZone *)zone{  \
return _instance;   \
}

//定义单例模式类 INTERFACE_SINGLETON(类名)
#undef  INTERFACE_SINGLETON
#define INTERFACE_SINGLETON( __class) \
- (__class *)sharedInstance; \
+ (__class *)sharedInstance;

//实现单例模式类
#undef  IMPLEMENTATION_SINGLETON
#define IMPLEMENTATION_SINGLETON( __class) \
- (__class *)sharedInstance \
{ \
return [__class sharedInstance]; \
} \
+ (__class *)sharedInstance \
{ \
static dispatch_once_t once; \
static __class * __singleton__; \
dispatch_once( &once, ^{ __singleton__ = [[[self class] alloc] init]; } ); \
return __singleton__; \
} \


#endif /* PCTools_pch */
